)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "SELECT * FROM playlists;")
# Disconnect
dbDisconnect(con)
playlists$country <- str_remove(playlists$name, "Top 50 - ")
View(playlists)
library(DBI)
library(RPostgres)
library(stringr)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
# Disconnect
dbDisconnect(con)
playlists$country <- str_remove(playlists$name, "Top 50 - ")
View(playlists)
playlists$country <- str_remove(playlists$name, "Top 50 - ")
View(playlists)
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
# Disconnect
dbDisconnect(con)
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
# Disconnect
dbDisconnect(con)
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
print(most_popular_tracks)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("sf")
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(sf)
install.packages("rnaturalearth")
install.packages("sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(sf)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
install.packages("sf", dependencies = TRUE)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(sf)
install.packages("sf")
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(sf)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(s2)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(sf)
install.packages("sf")
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
# Disconnect
dbDisconnect(con)
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
print(most_popular_tracks)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(rnaturalearth)
library(DBI)
library(RPostgres)
library(dplyr)
library(stringr)
library(ggplot2)
library(maps)
# Get map data (world map)
world_map <- map_data("world")
# Merge the world map with the most popular tracks data
map_data <- left_join(world_map, most_popular_tracks, by = c("region" = "country"))
ggplot(map_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = current_popularity), color = "black", size = 0.1) +
scale_fill_viridis_c(option = "C", direction = 1) +
geom_text(aes(x = long, y = lat, label = track_name), color = "white", size = 3) +
labs(title = "Most Popular Tracks by Country",
subtitle = "Based on Track Popularity",
caption = "Data Source: Your Dataset") +
theme_minimal() +
theme(legend.position = "bottom")
# Get map data (world map)
world_map <- map_data("world")
# Merge the world map with the most popular tracks data
map_data <- left_join(world_map, most_popular_tracks, by = c("region" = "country"))
ggplot(map_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = current_popularity), color = "black", linewidth = 0.1) +
scale_fill_viridis_c(option = "C", direction = 1) +
geom_text(aes(x = long, y = lat, label = track_name), color = "white", size = 3) +
labs(title = "Most Popular Tracks by Country",
subtitle = "Based on Track Popularity",
caption = "Data Source: Your Dataset") +
theme_minimal() +
theme(legend.position = "bottom")
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
View(most_popular_tracks)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
playlists$country <- str_remove(playlists$name, "Viral 50 - ") # add country column
# Disconnect
dbDisconnect(con)
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
View(most_popular_tracks)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
playlists$country <- str_remove(country$name, "Viral 50 - ") # add country column
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
playlists$country <- str_remove(country$name, "Viral 50 - ") # add country column
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select * from playlists join tracks on playlists.track_id=tracks.track_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
playlists$country <- str_remove(playlists$country, "Viral 50 - ") # add country column
# Disconnect
dbDisconnect(con)
# Get the most popular track per country
most_popular_tracks <- playlists %>%
group_by(country) %>%
slice_max(order_by = current_popularity, n = 1) %>%
ungroup()
View(most_popular_tracks)
library(DBI)
library(RPostgres)
library(stringr)
library(ggplot2)
library(maps)
library(dplyr)
library(plotly)
# Get map data
world_map <- map_data("world")
# Merge map data with the most popular tracks
map_data <- left_join(world_map, most_popular_tracks, by = c("region" = "country"))
# Create the static map with ggplot
static_map <- ggplot(map_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = current_popularity), color = "black", linewidth = 0.1) +
scale_fill_viridis_c(option = "C", direction = 1) +
geom_text(aes(x = long, y = lat, label = track_name), color = "white", size = 3) +
labs(title = "Most Popular Tracks by Country",
subtitle = "Based on Track Popularity",
caption = "Data Source: Your Dataset") +
theme_minimal() +
theme(legend.position = "bottom")
# Convert the static ggplot map to an interactive plotly map
interactive_map <- ggplotly(static_map)
# Display the interactive map
interactive_map
playlists
View(playlists)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
playlists <- dbGetQuery(con, "select *
from playlists
join tracks on playlists.track_id=tracks.track_id
join albums on playlists.album_id=albums.album_id
join trackartists ta on playlists.track_id=ta.track_id
join genreartists ga on ta.artist_id=ga.artist_id;")
# Clean
names(playlists) <- make.unique(names(playlists)) # remove duplicate cols
playlists$country <- str_remove(playlists$name, "Top 50 - ") # add country column
playlists$country <- str_remove(playlists$country, "Viral 50 - ") # add country column
# Disconnect
dbDisconnect(con)
View(playlists)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
tracks <- dbGetQuery(con, "select *
from playlists
join tracks on playlists.track_id=tracks.track_id
join albums on playlists.album_id=albums.album_id
join trackartists ta on playlists.track_id=ta.track_id
join genreartists ga on ta.artist_id=ga.artist_id;")
# Clean
names(tracks) <- make.unique(names(tracks)) # remove duplicate cols
tracks$country <- str_remove(tracks$name, "Top 50 - ") # add country column
tracks$country <- str_remove(tracks$country, "Viral 50 - ") # add country column
# Disconnect
dbDisconnect(con)
View(tracks)
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
tracks <- dbGetQuery(con, "select *
from playlists
join tracks on playlists.track_id=tracks.track_id
join albums on playlists.album_id=albums.album_id
join trackartists ta on playlists.track_id=ta.track_id
join genreartists ga on ta.artist_id=ga.artist_id
join artists on ga.artist_id=artists.artist_id;")
# Clean
names(tracks) <- make.unique(names(tracks)) # remove duplicate cols
tracks$country <- str_remove(tracks$name, "Top 50 - ") # add country column
tracks$country <- str_remove(tracks$country, "Viral 50 - ") # add country column
# Disconnect
dbDisconnect(con)
View(tracks)
# Group by 'country' and get the most popular 'artist_name' based on 'popularity'
most_popular_artist_per_country <- playlists %>%
group_by(country) %>%
slice_max(order_by = popularity, n = 1) %>%
ungroup()
# Connect to the database
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres", # in practice, HIDE THIS
password = "password" # in practice, HIDE THIS
)
# List tables
tables <- dbListTables(con)
print(tables)
# Run a query
tracks <- dbGetQuery(con, "select *
from playlists
join tracks on playlists.track_id=tracks.track_id
join albums on playlists.album_id=albums.album_id
join trackartists ta on playlists.track_id=ta.track_id
join genreartists ga on ta.artist_id=ga.artist_id
join artists on ga.artist_id=artists.artist_id;")
# Clean
names(tracks) <- make.unique(names(tracks)) # remove duplicate cols
tracks$country <- str_remove(tracks$name, "Top 50 - ") # add country column
tracks$country <- str_remove(tracks$country, "Viral 50 - ") # add country column
# Disconnect
dbDisconnect(con)
# Group by 'country' and get the most popular 'artist_name' based on 'popularity'
most_popular_artist_per_country <- playlists %>%
group_by(country) %>%
slice_max(order_by = popularity, n = 1) %>%
ungroup()
View(tracks)
# Group by 'country' and get the most popular 'artist_name' based on 'popularity'
most_popular_artist_per_country <- tracks %>%
group_by(country) %>%
slice_max(order_by = popularity, n = 1) %>%
ungroup()
# View the result
print(most_popular_artist_per_country)
# Group by 'country' and get the most popular 'artist_name' based on 'popularity'
most_popular_artist_per_country <- tracks %>%
group_by(country) %>%
slice_max(order_by = popularity, n = 1) %>%
ungroup()
# View the result
View(most_popular_artist_per_country)
# Group by 'country' and get the most popular 'artist_name' based on 'popularity', breaking ties by 'nbr_of_followers'
most_popular_artist_per_country <- tracks %>%
group_by(country) %>%
arrange(desc(popularity), desc(nbr_of_followers)) %>%  # Sort by popularity and then by nbr_of_followers (both in descending order)
slice(1) %>%  # Select the top entry for each country
ungroup()
# View the result
View(most_popular_artist_per_country)
# Group by 'country' and get the least popular 'artist_name' based on 'popularity', breaking ties by 'nbr_of_followers'
least_popular_artist_per_country <- tracks %>%
group_by(country) %>%
arrange(popularity, nbr_of_followers) %>%  # Sort by popularity (ascending) and then by nbr_of_followers (ascending)
slice(1) %>%  # Select the least popular artist for each country
ungroup()
# View the result
View(least_popular_artist_per_country)
View(static_map)
